{-
	/------------------------------------------------------------------------\
	| Created for: Telegram (Open Network) Blockchain Contest #2 (Freestyle) |
	| Project #1: Conditional transfer smart contract (CTSC)                 |
	>------------------------------------------------------------------------<
	| December 2019, second half (Happy New Year!)                           |
	| January 2020: Refactored to skydev:bleeding-edge branch goodies        |
	>------------------------------------------------------------------------<
	| the branch: https://github.com/Skydev0h/ton/tree/bleeding-edge         |
	| const keyword: https://github.com/ton-blockchain/ton/pull/227          |
	| include keyword: https://github.com/ton-blockchain/ton/pull/228        |
	| implicit keyword: https://github.com/ton-blockchain/ton/pull/236       |
	\------------------------------------------------------------------------/
-}

include "../stdlib.fc";

;;===========================================================================;;
;; Custom ASM instructions                                                   ;;
;;===========================================================================;;

int buy_gas(int grams) impure asm "BUYGAS";
(slice, int) dict_get?(cell dict, int key_len, slice key) asm(key dict key_len) "DICTGET" "NULLSWAPIFNOT";
(cell, int) dict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) "DICTDEL";
;; forall X -> (tuple, X) tpop(tuple list) asm "TPOP";

;;===========================================================================;;
;; Constants, structures                                                     ;;
;;===========================================================================;;

;;  Bit length
const BL:Flags     = 6;
const BL:UnixTime  = 32;
const BL:ChainId   = 8;
const BL:Address   = 256;
const BL:PublicKey = BL:Address;
const BL:Percent   = 20;
const BL:MsgFlags  = 4;
const BL:OpLength  = 32;
const BL:Signature = 512;

const InvKeyLength = 264; ;; 8 + 256

;;  Message flag
const MF:AddTranFees  = 1;
const MF:IgnoreErrors = 2;
const MF:MsgBalance   = 64;
const MF:AllBalance   = 128;

const Flag:HasController = 1;
int .HasController?(int a)   implicit asm "1 PUSHINT AND";
int .HasNoController?(int a) implicit asm "1 PUSHINT AND ISZERO";

const Flag:AutoRelease = 2;
int .AutoRelease?(int a)     implicit asm "2 PUSHINT AND";
int .AutoReclaim?(int a)     implicit asm "2 PUSHINT AND ISZERO";

const Flag:ContinuousCell = 4;
int .ContinuousColl?(int a)  implicit asm "4 PUSHINT AND";
int .LimitedColl?(int a)     implicit asm "4 PUSHINT AND ISZERO";

const Flag:CanReclaim = 8;
int .CanReclaim?(int a)      implicit asm "8 PUSHINT AND";
int .CantReclaim?(int a)     implicit asm "8 PUSHINT AND ISZERO";

const Flag:Initialized = 16;
int .Initialized?(int a)     implicit asm "16 PUSHINT AND";
int .Uninitialized?(int a)   implicit asm "16 PUSHINT AND ISZERO";

const Flag:Destroyed = 32;
int .Destroyed?(int a)       implicit asm "32 PUSHINT AND";

const Op:Release = 0x52656c65;
const Op:Reclaim = 0x52636c6d;
const Op:GasPlus = 0x4761732b;

const DefaultGasReserve = 5000000000; ;; 5 Gram

tuple PackStorage (int min_grams, int max_grams, int min_accepted,
		           int collect_deadline, int release_locktime, int release_deadline,
			       int Flags, cell investors, cell beneficiaries,
			       int ext_controller, int controller_wc, int controller_addr,
			       int beneficiary_wc, int beneficiary_addr) asm "14 TUPLE";
				   
(int, int, int, int, int, int, int, cell, cell, int, int, int, int, int) UnpackStorage(tuple data) asm "14 UNTUPLE";
				   
int [min_grams](tuple data)         implicit asm "0 INDEX";
int [max_grams](tuple data)         implicit asm "1 INDEX";
int [min_accepted](tuple data)      implicit asm "2 INDEX";
int [collect_deadline](tuple data)  implicit asm "3 INDEX";
int [release_locktime](tuple data)  implicit asm "4 INDEX";
int [release_deadline](tuple data)  implicit asm "5 INDEX";
int [flags_pack](tuple data)        implicit asm "6 INDEX";
cell [investors](tuple data)        implicit asm "7 INDEX";
cell [beneficiaries](tuple data)    implicit asm "8 INDEX";
int [ext_controller](tuple data)    implicit asm "9 INDEX";
int [controller_wc](tuple data)     implicit asm "10 INDEX";
int [controller_addr](tuple data)   implicit asm "11 INDEX";
int [controller_pubkey](tuple data) implicit asm "11 INDEX"; ;; alias
int [beneficiary_wc](tuple data)    implicit asm "12 INDEX";
int [beneficiary_addr](tuple data)  implicit asm "13 INDEX";

(tuple, ()) ~[flags_pack]=(tuple data, int flags) asm "6 SETINDEX";
(tuple, ()) ~[investors]=(tuple data, cell invs) asm "7 SETINDEX";
(tuple, ()) ~[beneficiaries]=(tuple data, cell bens) asm "8 SETINDEX";

;;===========================================================================;;

tuple Storage:Load() inline_ref {
	slice cs = get_data().begin_parse();
	
	int min_grams        = cs~load_grams();
	int max_grams        = cs~load_grams();
	int min_accepted     = cs~load_grams();
	int collect_deadline = cs~load_uint(BL:UnixTime);
	int release_locktime = cs~load_uint(BL:UnixTime);
	int release_deadline = cs~load_uint(BL:UnixTime);
	
	;; can_reclaim continuous_coll auto_release has_controller
	int Flags       = cs~load_uint(BL:Flags);
	
	cell investors       = cs~load_dict();
	cell beneficiaries   = cs~load_dict();
	int ext_controller   = 0;
	int controller_wc    = 0;
	int controller_addr  = 0;
	
	if (Flags.HasController?) {
		ext_controller   = cs~load_uint(1);
		if (ext_controller == 0) {
			controller_wc = cs~load_int(BL:ChainId);
		}
		controller_addr  = cs~load_uint(BL:Address);
	}
	int beneficiary_wc   = cs~load_int(BL:ChainId);
	int beneficiary_addr = cs~load_uint(BL:Address);
	cs.end_parse();
	return PackStorage(
		min_grams, max_grams, min_accepted,
		collect_deadline, release_locktime, release_deadline,
		Flags, investors, beneficiaries,
		ext_controller, controller_wc, controller_addr,
		beneficiary_wc, beneficiary_addr
	);
}

() Storage:Save(tuple data) impure inline_ref {
	(int min_grams, int max_grams, int min_accepted,
	 int collect_deadline, int release_locktime, int release_deadline,
	 int Flags, cell investors, cell beneficiaries,
	 int ext_controller, int controller_wc, int controller_addr,
	 int beneficiary_wc, int beneficiary_addr) = UnpackStorage(data);
	builder bld = begin_cell()
			.store_grams(min_grams)
			.store_grams(max_grams)
			.store_grams(min_accepted)
			.store_uint(collect_deadline, BL:UnixTime)
			.store_uint(release_locktime, BL:UnixTime)
			.store_uint(release_deadline, BL:UnixTime)
	        .store_uint(Flags, BL:Flags) 
			.store_dict(investors)
			.store_dict(beneficiaries);
	if (Flags.HasController?) {
		bld~store_uint(ext_controller, 1);
		if (ext_controller == 0) {
			bld~store_int(controller_wc, BL:ChainId);
		}
		bld~store_uint(controller_addr, BL:Address);
	}
	bld~store_int(beneficiary_wc, BL:ChainId);
	bld~store_uint(beneficiary_addr, BL:Address);
	set_data(bld.end_cell());
}

;;===========================================================================;;

() Message:Send(int wc, int addr, int grams, int mode) impure inline_ref {
	;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool 
	;;                src:MsgAddress -> 01 b 000 0x18 | 100
	;;                NO BOUNCE: 010000100
	var msg = begin_cell()
		.store_uint(0x84, 9) ;; NO BOUNCE: 0 1000 100, bounce: 0xC4
		.store_int(wc, BL:ChainId)
		.store_uint(addr, BL:Address)
		.store_grams(grams)
		.store_uint (0, 107); ;; 1 + 4 + 4 + 64 + 32 + 1 + 1
	send_raw_message(msg.end_cell(), mode | MF:IgnoreErrors);
}

;;===========================================================================;;

() Logic:DoRelease(tuple data) impure {
	int Flags = data.[flags_pack];
	throw_if(35, Flags.CanReclaim?); ;; Additional safeguard check
	accept_message(); ;; full speed ahead
	Flags |= Flag:Destroyed;
	data~[flags_pack]= Flags;
	cell ben = data.[beneficiaries];
	data~[investors]= (null());
	data~[beneficiaries]= (null());
	Storage:Save(data);
	commit();
	int bal = get_balance().car();
	int rem = bal;
	var msg_hdr = begin_cell().store_uint(0x84, 9); ;; NO BOUNCE: 0 1000 100, bounce: 0xC4
	if (~ ben.cell_null?()) {
		slice val = ben.begin_parse();
		while (val.slice_bits()) {
			int bwc = val~load_int(BL:ChainId);
			int baddr = val~load_uint(BL:Address);
			int bvalue = val~load_grams();
			int percent = 0;
			if (bvalue == 0) {
				percent = val~load_uint(BL:Percent);
				;; DISABLED FUNCTIONALITY: High precision percentages
				if (percent < 1000000) {
					bvalue = bal * percent / 1000000;
				} {- elseif (percent < 1010000) {
					bvalue = (bal * (percent - 1000000)) / 10000000;
				} elseif (percent < 1020000) {
					bvalue = (bal * (percent - 1010000)) / 100000000;
				} elseif (percent < 1030000) {
					bvalue = (bal * (percent - 1020000)) / 1000000000;
				} elseif (percent < 1040000) {
					bvalue = (bal * (percent - 1030000)) / 10000000000;
				} else {
					bvalue = (bal * (percent - 1040000)) / 100000000000;
				} -}
			}
			int to_send = min(bvalue, rem);
			if (to_send > 0) {
				var msg = msg_hdr.store_int(bwc, BL:ChainId).store_uint(baddr, BL:Address)
				                 .store_grams(to_send).store_uint(0, 107);
				send_raw_message(msg.end_cell(), MF:IgnoreErrors);
				rem -= to_send;
				;; Message:Send(bwc, baddr, bvalue, 0);
			}
			if ((val.slice_bits() == 0) & (val.slice_refs() >= 1)) {
				cell next = val~load_ref();
				val = next.begin_parse();
			}
		}
	}
	Message:Send(data.[beneficiary_wc], data.[beneficiary_addr], 0, MF:AllBalance);
}

;;===========================================================================;;

() Controller:ReleaseFunds(tuple data, int now) impure {
	throw_if(31, now < data.[collect_deadline]);
	throw_if(32, now < data.[release_locktime]);
	throw_if(33, (data.[release_deadline] != 0) & (now >= data.[release_deadline]));
	int Flags = data.[flags_pack];
	throw_if(34, Flags.CanReclaim?);
	int bal = get_balance().car();
	throw_if(36, bal < data.[min_grams]);
	if (data.[ext_controller]) { accept_message(); }
	Logic:DoRelease(data);
}

() Controller:InitiateReclaim(tuple data, int now) impure {
	throw_if(31, now < data.[collect_deadline]);
	throw_if(32, now < data.[release_locktime]);
	throw_if(33, (data.[release_deadline] != 0) & (now >= data.[release_deadline]));
	if (data.[ext_controller]) { accept_message(); }
	data~[flags_pack]= (data.[flags_pack] | Flag:CanReclaim);
	data~[beneficiaries]= (null());
	Storage:Save(data);
}

;;===========================================================================;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
	var data = Storage:Load();

	int Flags = data.[flags_pack];
	if (Flags.Destroyed?) {
		accept_message();
		Message:Send(data.[beneficiary_wc], data.[beneficiary_addr], 0, MF:AllBalance);
		return();
	}
	
	slice cs = in_msg_cell.begin_parse();
	int msgflg = cs~load_uint(BL:MsgFlags);
	if (msgflg & 1) { return (); } ;; bounced messages
	slice s_addr = cs~load_msg_addr();
	(int src_wc, int src_addr) = s_addr.parse_std_addr();
	
	int now = now();
	int bal = get_balance().car() - msg_value;
	
	int collect_deadline = data.[collect_deadline];
	int release_deadline = data.[release_deadline];
	
	if (Flags.CantReclaim? & (collect_deadline > 0) & (now >= collect_deadline) & (bal < data.[min_grams])) {
		;; LOGIC: Process failing to collect min grams before collect deadline <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		Flags |= Flag:CanReclaim;
		data~[flags_pack]= Flags;
		data~[beneficiaries]= (null());
		Storage:Save(data);
	}
	
	if (Flags.AutoRelease? & Flags.CantReclaim? & (release_deadline > 0) & (now >= release_deadline) & (bal >= data.[min_grams])) {
		;; LOGIC: Automatically release money after release deadline <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		Logic:DoRelease(data);
		return ();
	}
	
	slice src = s_addr;
	if (src~load_uint(3) == 5) { ;; 10 1 - anycast is present!!!
		src = begin_cell().store_int(src_wc, BL:ChainId).store_uint(src_addr, BL:Address).end_cell().begin_parse();
	}
	
	int controller_addr = data.[controller_addr];
	int controller_wc = data.[controller_wc];
	
	int op = 0;
	if (slice_bits(in_msg) >= BL:OpLength) {
		op = in_msg~load_uint(BL:OpLength);
	}
	
	if ((controller_addr != 0) & (data.[ext_controller] == 0) & (Flags.CantReclaim?)
	  & (src_wc == controller_wc) & (src_addr == controller_addr)) {
	    ;; LOGIC: Process controller internal message <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	    Message:Send(src_wc, src_addr, 0, MF:MsgBalance);
		if (op == Op:Release) {
			Controller:ReleaseFunds(data, now);
		} elseif (op == Op:Reclaim) {
			Controller:InitiateReclaim(data, now);
		}
		return ();
	}
	
	if (Flags.AutoReclaim? & Flags.CantReclaim? & (release_deadline > 0) & (now >= release_deadline)) {
	    ;; LOGIC: Activate automatic reclaim after release deadline <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		Flags |= Flag:CanReclaim;
		data~[flags_pack]= Flags;
		data~[beneficiaries]= (null());
		Storage:Save(data);
		commit();
	}
	
	cell investors = data.[investors];
	if (Flags.CanReclaim?) {
		;; LOGIC: Process internal message in reclaim mode <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		(slice res, int f) = investors.dict_get?(InvKeyLength, src);
		if (~ f) {
			Message:Send(src_wc, src_addr, 0, MF:MsgBalance);
			return ();
		}
		investors~dict_delete?(InvKeyLength, src);
		Message:Send(src_wc, src_addr, res~load_grams(), MF:MsgBalance);
		data~[investors]= investors;
		Storage:Save(data);
		return ();
	}
	
	int reserved = DefaultGasReserve;
	if (op == Op:GasPlus) {
		;; LOGIC: Alter reserved part for gas <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		reserved = max(reserved, in_msg~load_grams());
		;; int newreserved = in_msg~load_grams();
		;; if (newreserved > reserved) {
		;; 	reserved = newreserved;
		;;}
	}
	;; buy_gas(reserved);
	
	int deposit = msg_value - reserved;
	int min_accepted = data.[min_accepted];
	if (deposit < min_accepted) {
		;; LOGIC: Check min accepted Gram condition <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance);
		return ();
	}
	
	if((collect_deadline != 0) & (now >= collect_deadline) & (Flags.LimitedColl?)) {
		;; LOGIC: Prevent deposit if collect deadline reached and continuous collection disabled <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance);
		return ();
	}
	
	int max_grams = data.[max_grams];
	if ((max_grams > 0) & (bal + deposit > max_grams)) {
		;; LOGIC: Process max grams overflowing <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		deposit = max_grams - bal;
	}
	
	if (deposit == 0) {
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance);
		return ();
	}
	
	int accnt = 0;
	(slice res, int f) = investors.dict_get?(InvKeyLength, src);
	if (f) { accnt = res~load_grams(); }
	
	accnt += deposit;
	investors~dict_set_builder(InvKeyLength, src, begin_cell().store_grams(accnt));
	data~[investors]= investors;
	
	Storage:Save(data);

	raw_reserve(bal + deposit, 0);
	Message:Send(src_wc, src_addr, 0, MF:AllBalance);
	
	return ();
}

() recv_external(slice in_msg) impure {
	var data = Storage:Load();
	int Flags = data.[flags_pack];
	if (Flags.Destroyed?) {
		accept_message();
		Message:Send(data.[beneficiary_wc], data.[beneficiary_addr], 0, MF:AllBalance);
		return();
	}
	if (Flags.Uninitialized?) {
		accept_message();
		Flags |= Flag:Initialized;
		data~[flags_pack]= Flags;
		Storage:Save(data);
		return ();
	}
	throw_unless(41, data.[ext_controller]);
	slice signature = in_msg~load_bits(BL:Signature);
	int shash = slice_hash(in_msg);
	throw_unless(42, check_signature(shash, signature, data.[controller_pubkey]));
	int now = now();
	int op = in_msg~load_uint(BL:OpLength);
	if (op == Op:Release) {
		Controller:ReleaseFunds(data, now);
	} elseif (op == Op:Reclaim) {
		Controller:InitiateReclaim(data, now);
	} else {
		throw(30);
	}
	return ();
}

;;===========================================================================;;

_ get_config() method_id {
	return Storage:Load();
}

int reclaiming() method_id {
	return Storage:Load().[flags_pack].CanReclaim?;
}

int reclaimable(int workchain_id, int address) method_id {
	slice src = begin_cell().store_int(workchain_id, BL:ChainId).store_uint(address, BL:Address).end_cell().begin_parse();
	var data = Storage:Load();
	if (data.[flags_pack].CantReclaim?) {
		return 0;
	}
	(slice res, int f) = data.[investors].dict_get?(InvKeyLength, src);
	if (f) { 
		return res~load_grams(); 
	}
	return 0;
}