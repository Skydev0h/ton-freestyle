{-
	/------------------------------------------------------------------------\
	| Created for: Telegram (Open Network) Blockchain Contest #2 (Freestyle) |
	| Project #2: Data storage proxy smart contract (DSPSC)                  |
	>------------------------------------------------------------------------<
	| December 2019, second half (Happy New Year!)                           |
	\------------------------------------------------------------------------/
-}


;;===========================================================================;;
;; Custom ASM instructions                                                   ;;
;;===========================================================================;;

(builder, ()) ~store_ref(builder b, cell c) asm(c b) "STREF";
(builder, ()) ~store_slice(builder b, slice s) asm "STSLICER";
(builder, ()) ~store_grams(builder b, int x) asm "STGRAMS";
(builder, ()) ~store_dict(builder b, cell c) asm(c b) "STDICT";

int buy_gas(int grams) asm "BUYGAS";
(slice, int) dict_get?(cell dict, int key_len, slice key) asm(key dict key_len) "DICTGET" "NULLSWAPIFNOT";
(cell, int) dict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) "DICTDEL";
;; forall X -> (tuple, X) tpop(tuple list) asm "TPOP";

;; Args: s D n | Success: s' x s'' -1 | Failure: s 0 -> s N N 0
(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) 
		asm(key dict key_len) "PFXDICTGETQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

;; Args: x k D n | Success: D' -1 | Failure: D 0
(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) 
		asm(value key dict key_len) "PFXDICTSET";

;; Args: k D n | Success: D' -1 | Failure: D 0
(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) 
		asm(key dict key_len) "PFXDICTDEL";

;;===========================================================================;;
;; Constants, structures                                                     ;;
;;===========================================================================;;

;;  Message flag
int MF:AddTranFees()  asm "1 PUSHINT";
int MF:IgnoreErrors() asm "2 PUSHINT";
int MF:MsgBalance()   asm "64 PUSHINT";
int MF:AllBalance()   asm "128 PUSHINT";

int Flag:ChangingFRT()      asm "1 PUSHINT";
int Flag:!ChangingFRT()     asm "126 PUSHINT";
int .ChangingFRT?(int a)    asm "1 PUSHINT AND";
int .NotChangingFRT?(int a) asm "1 PUSHINT AND ISZERO";

tuple PackStorage (int flags, cell box_tree, int seq_no, int owner_key,
	               int protected_frt, int new_frt_value, int new_frt_timer) asm "7 TUPLE";
				   
(int, cell, int, int, int, int, int) UnpackStorage(tuple data) asm "7 UNTUPLE";

int _flags_(tuple data)         asm "0 INDEX";
cell _box_tree_(tuple data)     asm "1 INDEX";
int _seq_no_(tuple data)        asm "2 INDEX";
int _owner_key_(tuple data)     asm "3 INDEX";
int _protected_frt_(tuple data) asm "4 INDEX";
int _new_frt_value_(tuple data) asm "5 INDEX";
int _new_frt_timer_(tuple data) asm "6 INDEX";

(tuple, ()) ~_flags=_(tuple data, int v)         asm "0 SETINDEX";
(tuple, ()) ~_box_tree=_(tuple data, cell v)     asm "1 SETINDEX";
(tuple, ()) ~_seq_no=_(tuple data, int v)        asm "2 SETINDEX";
(tuple, ()) ~_owner_key=_(tuple data, int v)     asm "3 SETINDEX";
(tuple, ()) ~_protected_frt=_(tuple data, int v) asm "4 SETINDEX";
(tuple, ()) ~_new_frt_value=_(tuple data, int v) asm "5 SETINDEX";
(tuple, ()) ~_new_frt_timer=_(tuple data, int v) asm "6 SETINDEX";

int Flag:HasOwner()      asm "1 PUSHINT";
int Flag:!HasOwner()     asm "254 PUSHINT";
int .HasOwner?(int a)    asm "1 PUSHINT AND";
int .HasNoOwner?(int a)  asm "1 PUSHINT AND ISZERO";

int Flag:Frozen()        asm "2 PUSHINT";
int Flag:!Frozen()       asm "253 PUSHINT";
int .Frozen?(int a)      asm "2 PUSHINT AND";
int .NotFrozen?(int a)   asm "2 PUSHINT AND ISZERO";

int Flag:UseQuota()      asm "4 PUSHINT";
int Flag:!UseQuota()     asm "251 PUSHINT";
int .UseQuota?(int a)    asm "4 PUSHINT AND";
int .NoQuota?(int a)     asm "4 PUSHINT AND ISZERO";

int Flag:Protected()     asm "8 PUSHINT";
int Flag:!Protected()    asm "247 PUSHINT";
int .Protected?(int a)   asm "8 PUSHINT AND";
int .Unprotected?(int a) asm "8 PUSHINT AND ISZERO";

int Flag:AllowInquiry()   asm "16 PUSHINT";
int Flag:!AllowInquiry()  asm "239 PUSHINT";
int .AllowInquiry?(int a) asm "16 PUSHINT AND";
int .DenyInquiry?(int a)  asm "16 PUSHINT AND ISZERO";

int Flag:AllowInline()    asm "32 PUSHINT";
int Flag:!AllowInline()   asm "223 PUSHINT";
int .AllowInline?(int a)  asm "32 PUSHINT AND";
int .DenyInline?(int a)   asm "32 PUSHINT AND ISZERO";

int Flag:AllowGet()       asm "64 PUSHINT";
int Flag:!AllowGet()      asm "191 PUSHINT";
int .AllowGet?(int a)     asm "64 PUSHINT AND";
int .DenyGet?(int a)      asm "64 PUSHINT AND ISZERO";

int Flag:FRPending()      asm "128 PUSHINT";
int Flag:!FRPending()     asm "127 PUSHINT";
int .FRPending?(int a)    asm "128 PUSHINT AND";
int .FRNotPending?(int a) asm "128 PUSHINT AND ISZERO";

tuple PackBox (int flags, int owner_wc, int owner_addr, int quota_cells, int quota_bits,
               int fr_timeout, cell data) asm "7 TUPLE";
			   
(int, int, int, int, int, int, cell) UnpackBox(tuple box) asm "7 UNTUPLE";

;; int _flags_(tuple data)    asm "0 INDEX";
int _owner_wc_(tuple data)    asm "1 INDEX";
int _owner_addr_(tuple data)  asm "2 INDEX";
int _quota_cells_(tuple data) asm "3 INDEX";
int _quota_bits_(tuple data)  asm "4 INDEX";
int _fr_timeout_(tuple data)  asm "5 INDEX";
cell _data_(tuple data)       asm "6 INDEX";

;; (tuple, ()) ~_flags=_(tuple data, int v)    asm "0 SETINDEX";
(tuple, ()) ~_owner_wc=_(tuple data, int v)    asm "1 SETINDEX";
(tuple, ()) ~_owner_addr=_(tuple data, int v)  asm "2 SETINDEX";
(tuple, ()) ~_quota_cells=_(tuple data, int v) asm "3 SETINDEX";
(tuple, ()) ~_quota_bits=_(tuple data, int v)  asm "4 SETINDEX";
(tuple, ()) ~_fr_timeout=_(tuple data, int v)  asm "5 SETINDEX";
(tuple, ()) ~_data=_(tuple data, cell v)       asm "6 SETINDEX";

int Op:BoxNew()    asm "1651402103 PUSHINT";
int Op:BoxDelete() asm "1650746732 PUSHINT";
int Op:Freeze()    asm "1718778490 PUSHINT";
int Op:Thaw()      asm "1952997751 PUSHINT";
int Op:Protect()   asm "1886547828 PUSHINT";
int Op:ForceRes()  asm "1718773107 PUSHINT";
int Op:BoxSet()    asm "1651729780 PUSHINT";
int Op:BoxConfig() asm "1650681447 PUSHINT";
int Op:ChOwner()   asm "1667788663 PUSHINT";
int Op:ChangeFRT() asm "1667786354 PUSHINT";
int Op:Unprotect() asm "1970172018 PUSHINT";

int Op:Inquiry()   asm "1768845685 PUSHINT";
int Op:Proxy()     asm "1886547832 PUSHINT";

;;===========================================================================;;

tuple Storage:Load() inline_ref {
	slice cs = get_data().begin_parse();
	
	int flags         = cs~load_uint(7);
	cell box_tree     = cs~load_dict();
	int seq_no        = cs~load_uint(32);
	int owner_key     = cs~load_uint(256);
	int protected_frt = cs~load_uint(24);
	int new_frt_value = 0;
	int new_frt_timer = 0;
	if (flags.ChangingFRT?()) {
		new_frt_value = cs~load_uint(24);
		new_frt_timer = cs~load_uint(32);
	}
	cs.end_parse();
	return PackStorage(
		flags, box_tree, seq_no, owner_key, 
		protected_frt, new_frt_value, new_frt_timer
	);
}

() Storage:Save(tuple data) impure inline_ref {
	(int flags, cell box_tree, int seq_no, int owner_key,
	 int protected_frt, int new_frt_value, int new_frt_timer) = UnpackStorage(data);
	 builder bld = begin_cell()
	         .store_uint(flags, 7)
	         .store_dict(box_tree)
			 .store_uint(seq_no, 32)
			 .store_uint(owner_key, 256)
			 .store_uint(protected_frt, 24);
	if (flags.ChangingFRT?()) {
		bld~store_uint(new_frt_value, 24);
		bld~store_uint(new_frt_timer, 32);
	}
	set_data(bld.end_cell());
}

;;===========================================================================;;

tuple Box:Load(slice cs) {
	int flags = cs~load_uint(8);
	int owner_wc = 0;
	int owner_addr = 0;
	if (flags.HasOwner?()) {
		owner_wc    = cs~load_int(8);
		owner_addr  = cs~load_uint(256);
	}
	int quota_cells = 0;
	int quota_bits  = 0;
	if (flags.UseQuota?()) {
		quota_cells = cs~load_grams();
		quota_bits  = cs~load_grams();
	}
	int fr_timeout  = 0;
	if (flags.FRPending?()) {
		fr_timeout  = cs~load_uint(32);
	}
	cell data = cs~load_ref();
	return PackBox(
		flags, owner_wc, owner_addr, 
		quota_cells, quota_bits, fr_timeout, data
	);
}

slice Box:Save(tuple data) impure inline_ref {
	(int flags, int owner_wc, int owner_addr, 
	 int quota_cells, int quota_bits,
     int fr_timeout, cell data) = UnpackBox(data);
	builder bld = begin_cell().store_uint(flags, 8);
	if (flags.HasOwner?()) {
		bld~store_int(owner_wc, 8);
		bld~store_uint(owner_addr, 256);
	}
	if (flags.UseQuota?()) {
		bld~store_grams(quota_cells);
		bld~store_grams(quota_bits);
	}
	if (flags.FRPending?()) {
		bld~store_uint(fr_timeout, 32);
	}
	bld~store_ref(data);
	return bld.end_cell().begin_parse();
}

() Box:Store(tuple bdata, cell root, tuple data, slice name) impure inline_ref {
	slice box = Box:Save(bdata);
	throw_unless(31, root~pfxdict_set?(1023, name, box));	
	data~_box_tree=_(root);
	Storage:Save(data);
}

{-
int Flag:HasOwner()      asm "1 PUSHINT";
int Flag:Frozen()        asm "2 PUSHINT";
int Flag:UseQuota()      asm "4 PUSHINT";
int Flag:Protected()     asm "8 PUSHINT";
int Flag:AllowInquiry()   asm "16 PUSHINT";
int Flag:AllowInline()    asm "32 PUSHINT";
int Flag:AllowGet()       asm "64 PUSHINT";
int Flag:FRPending()      asm "128 PUSHINT";

int _quota_cells_(tuple data) asm "3 INDEX";
int _quota_bits_(tuple data)  asm "4 INDEX";
-}

tuple Box:Configure(tuple box, slice query, int admin) {
	int set_flags = query~load_uint(8);
	int rst_flags = query~load_uint(8);
	throw_if(51, (set_flags & rst_flags));
	int any_flags = set_flags | rst_flags;
	int flags = box._flags_();
	throw_if(52, (any_flags & 0x8A)); ;; Frozen Protected FRPending
	if (admin == 0) {
		throw_if(52, (any_flags & 0x8F)); ;; All but Allows
	}
	if ((flags.Protected?() != 0) & admin) {
		throw_if(52, ((set_flags & Flag:UseQuota()) != 0) & ((flags & Flag:UseQuota()) == 0));
		throw_if(52, (any_flags & Flag:HasOwner()));
		throw_if(52, (rst_flags & 0x70)); ;; Allows
	}
	flags = flags | set_flags & (255 - rst_flags);
	box~_flags=_(flags);
	if (set_flags.HasOwner?()) {
		int new_wcid = query~load_int(8);
		int new_addr = query~load_uint(256);
		box~_owner_wc=_(new_wcid);
		box~_owner_addr=_(new_addr);
	}
	if (set_flags.UseQuota?()) {
		int new_qcells = query~load_grams();
		int new_qbits  = query~load_grams();
		if ((flags.Protected?() != 0) & admin) {
			throw_if(53, (new_qcells < box._quota_cells_()) & (new_qcells != 0));	
			throw_if(53, (new_qbits < box._quota_bits_()) & (new_qbits != 0));	
			throw_if(53, (new_qcells > 0) & (box._quota_cells_() == 0));
			throw_if(53, (new_qbits > 0) & (box._quota_bits_() == 0));
		}
		box~_quota_cells=_(new_qcells);
		box~_quota_bits=_(new_qbits);
	}
	return box;
}

() Message:Send(int wc, int addr, int grams, int mode, slice prefix, cell data, slice suffix) impure {
	;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool 
	;;                src:MsgAddress -> 01 b 000 0x18 | 100
	;;                NO BOUNCE: 010000100
	var msg = begin_cell()
		.store_uint(0x84, 9) ;; NO BOUNCE: 0 1000 100, bounce: 0xC4
		.store_int(wc, 8)
		.store_uint(addr, 256)
		.store_grams(grams)
		.store_uint (0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
	if (prefix.null?() == 0) {
		msg~store_slice(prefix);
		if (mode & 256) {
			msg~store_slice(data.begin_parse());
			mode -= 256;
		} else {
			msg~store_ref(data);
		}
	}
	if (suffix.null?() == 0) {
		msg~store_slice(suffix);
	}
	send_raw_message(msg.end_cell(), mode | MF:IgnoreErrors());
}

(int, int) Slice:Lengths(slice val) { ;; only for internal calcs
	int cells = 1;
	int bits = val.slice_bits();
	while (val.slice_refs()) {
		(int in_cells, int in_bits) = Slice:Lengths(val~load_ref().begin_parse());
		cells += in_cells; bits += in_bits;
	}
	return (cells, bits);
}

;;===========================================================================;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
	slice cs = in_msg_cell.begin_parse();
	int msgflg = cs~load_uint(4);
	if (msgflg & 1) { return (); } ;; bounced messages
	slice s_addr = cs~load_msg_addr();
	(int src_wc, int src_addr) = s_addr.parse_std_addr();
	var data = Storage:Load();
	int now = now();
	if (in_msg.slice_bits() < 32) { return(); }
	int op = in_msg~load_uint(32);
	if (op == 0) { return(); } ;; simple transfer with comment
	slice box_name = in_msg~load_ref().begin_parse();
	cell root = data._box_tree_();
	(slice name, slice val, slice tail, int succ) = root.pfxdict_get?(1023, box_name);
	throw_unless(44, succ); 
	throw_unless(45, tail.slice_empty?());
	var box = Box:Load(val);
	int bflags = box._flags_();
{-
int Op:BoxSet()    asm "1651729780 PUSHINT";
int Op:BoxConfig() asm "1650681447 PUSHINT";
int Op:Unprotect() asm "1970172018 PUSHINT";
int Op:Protect()   asm "1886547828 PUSHINT";
int Op:Inquiry()   asm "1768845685 PUSHINT";
int Op:Proxy()     asm "1886547832 PUSHINT";
-}
	slice nslice = null();
	if (op == Op:Inquiry()) {
		throw_unless(33, bflags.AllowInquiry?());
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance(), in_msg, box._data_(), nslice);
		return ();
	}
	if (op == Op:Proxy()) {
		throw_unless(33, bflags.AllowInline?());
		int targ_wcid = in_msg~load_int(8);
		int targ_addr = in_msg~load_uint(256);
		int box_mode  = in_msg~load_uint(1);
		slice prefix  = in_msg~load_ref().begin_parse();
		slice suffix  = in_msg~load_ref().begin_parse();
		Message:Send(targ_wcid, targ_addr, 0, MF:MsgBalance() | (box_mode << 8), prefix, box._data_(), suffix);
		return ();
	}
	throw_if(39, bflags.Frozen?());
	throw_unless(32, bflags.HasOwner?());
	throw_if(32, box._owner_wc_() != src_wc);
	throw_if(32, box._owner_addr_() != src_addr);
	if (op == Op:BoxSet()) {
		cell new_val = in_msg~load_ref();
		if (bflags.UseQuota?()) {
			(int cells, int bits) = Slice:Lengths(new_val.begin_parse());
			int quota_cells = box._quota_cells_();
			int quota_bits = box._quota_bits_();
			throw_if(48, (quota_cells > 0) & (cells > quota_cells));
			throw_if(49, (quota_bits > 0) & (bits > quota_bits));
		}
		box~_data=_(new_val);
		Box:Store(box, root, data, name);
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance(), null(), null(), null());
		return ();
	}
	if (op == Op:BoxConfig()) {
		box = Box:Configure(box, in_msg, false);
		Box:Store(box, root, data, name);
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance(), null(), null(), null());
		return ();
	}
	if (op == Op:Protect()) {
		throw_unless(46, bflags.FRPending?());
		box~_flags=_(bflags & Flag:!FRPending());
		Box:Store(box, root, data, name);
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance(), null(), null(), null());
		return ();
	}
	if (op == Op:Unprotect()) {
		box~_flags=_(bflags & Flag:!FRPending() & Flag:!Protected());
		Box:Store(box, root, data, name);
		Message:Send(src_wc, src_addr, 0, MF:MsgBalance(), null(), null(), null());
		return ();
	}
	
}

() recv_external(slice in_msg) impure {
	int now = now();
	var data = Storage:Load();
	int flags = data._flags_();
	slice signature = in_msg~load_bits(512);
	int shash = slice_hash(in_msg);
	throw_unless(42, check_signature(shash, signature, data._owner_key_()));
	int seq_no = in_msg~load_uint(32);
	throw_unless(43, seq_no == data._seq_no_());
	accept_message();
	data~_seq_no=_(seq_no + 1);
	Storage:Save(data);
	commit();
	int op = in_msg~load_uint(32);
	if (op == 0) { return (); } ;; initialization
	if (op == Op:ChOwner()) {
		data~_owner_key=_(in_msg~load_uint(256));
		Storage:Save(data);
		return ();
	}
	if (op == Op:ChangeFRT()) {
		int new_frt_val = in_msg~load_uint(24);
		if (flags.ChangingFRT?()) {
			throw_unless(45, data._new_frt_value_() == new_frt_val);
			throw_unless(44, now >= data._new_frt_timer_());
			flags &= Flag:!ChangingFRT();
			data~_flags=_(flags);
			data~_protected_frt=_(data._new_frt_value_());
			Storage:Save(data);
			return();
		}
		data~_flags=_(flags | Flag:ChangingFRT());
		data~_new_frt_value=_(new_frt_val);
		int interval = data._protected_frt_();
		if (interval == 0) {
			interval = (604800 - new_frt_val);
		}
		interval = max(86400, interval);
		data~_new_frt_timer=_(now + interval);
		Storage:Save(data);
		return ();
	}
	;; ---------------------------------------------------------------------------------------
	slice box_name = in_msg~load_ref().begin_parse();
	;; (_, int name_last_byte) = box_name.slice_last(8).load_uint(8);
	;; throw_unless(40, name_last_byte == 0);
	cell root = data._box_tree_();
	(slice name, slice val, slice tail, int succ) = root.pfxdict_get?(1023, box_name);
	if (op == Op:BoxNew()) {
		throw_if(44, succ); ;; found box or name collision
;; (int flags, int owner_wc, int owner_addr, int quota_cells, int quota_bits, int fr_timeout, cell data)
		var nbox = PackBox(0, 0, 0, 0, 0, 0, begin_cell().end_cell());
		nbox = Box:Configure(nbox, in_msg, true);
		Box:Store(nbox, root, data, name);
		return ();
	}
	;; ---------------------------------------------------------------------------------------
	throw_unless(44, succ); 
	throw_unless(45, tail.slice_empty?());
	var box = Box:Load(val);
	int bflags = box._flags_();
	if (op == Op:Thaw()) {
		throw_unless(39, bflags.Frozen?());
		box~_flags=_(bflags & Flag:!Frozen());
		Box:Store(box, root, data, name);
		return ();
	}
	throw_if(39, bflags.Frozen?());
	if (op == Op:ForceRes()) {
		if (bflags.FRPending?()) {
			throw_unless(47, now >= box._fr_timeout_());
			box~_flags=_(bflags & Flag:!FRPending() & Flag:!Protected());
			Box:Store(box, root, data, name);
			return ();
		}
		throw_unless(46, data._protected_frt_() > 0);
		box~_flags=_(bflags | Flag:FRPending());
		box~_fr_timeout=_(now + data._protected_frt_());
		Box:Store(box, root, data, name);
		return ();
	}
	if (op == Op:BoxConfig()) {
		box = Box:Configure(box, in_msg, true);
		Box:Store(box, root, data, name);
		return ();
	}
	throw_if(38, bflags.Protected?());
	if (op == Op:BoxDelete()) {
		throw_unless(31, root~pfxdict_delete?(1023, name));
		data~_box_tree=_(root);
		Storage:Save(data);
		return ();
	}
	if (op == Op:Freeze()) {
		box~_flags=_(bflags | Flag:Frozen());
		Box:Store(box, root, data, name);
		return ();
	}
	
	if (op == Op:Protect()) {
		throw_unless(38, bflags.HasOwner?());
		box~_flags=_(bflags | Flag:Protected());
		Box:Store(box, root, data, name);
		return ();
	}

	if (op == Op:BoxSet()) {
		cell new_val = in_msg~load_ref();
		box~_data=_(new_val);
		Box:Store(box, root, data, name);
		return ();
	}
	throw(40); ;; Unknown operation
}

;;===========================================================================;;

int seqno() method_id { ;; Retrieve sequence number
	return Storage:Load()._seq_no_();
}

tuple get_box_internal(slice box_name, int for_value) {
	var data = Storage:Load();
	cell root = data._box_tree_();	
	(slice name, slice val, slice tail, int succ) = root.pfxdict_get?(1023, box_name);
	throw_unless(44, succ); 
	throw_unless(45, tail.slice_empty?());
	var box = Box:Load(val);
	if (for_value == 0) {
		box~_data=_(null());
	}
	return box;
}

tuple get_box(slice box_name) method_id {
	return get_box_internal(box_name, false);
}

cell get_box_value(slice box_name) method_id {
	var box = get_box_internal(box_name, true);
	throw_unless(33, box._flags_().AllowGet?());
	return box._data_();
}
