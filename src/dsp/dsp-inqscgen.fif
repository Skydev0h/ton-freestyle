#!/usr/bin/fift -s

/*
	/------------------------------------------------------------------------\
	| Created for: Telegram (Open Network) Blockchain Contest #2 (Freestyle) |
	| Project #2: Data storage proxy smart contract (DSPSC)                  |
	>------------------------------------------------------------------------<
	| December 2019, second half (Happy New Year!)                           |
	\------------------------------------------------------------------------/
*/

"TonUtil.fif" include
"GetOpt.fif" include
"Asm.fif" include
"Color.fif" include
{ ^red .s ^reset 255 halt } : ^ // inspect stack tool

{ show-options-help 1 halt } : usage

{ find { 1 abort"word not found" } ifnot execute } : resolve
{ bl word } : next-word

{ next-word 1 { resolve ! } } :: => // assign to right
{ next-word 1 { resolve -rot pair swap ! } } :: 2=> // assign to right
{ next-word 1 { hole dup 1 'nop does rot 0 (create) ! } } :: =:> // create variable with default value

{ execute drop } : switch
{ 2 pick rot  = swap if } : case
{ 2 pick rot and swap if } : &case
{ 2 pick rot $= swap if } : $case

{ next-word 1 { dup resolve @ 1 'nop does swap 0 (create) } } :: stone // freezes variable value as constant

// Options 
begin-options "<box-name>" +cr +cr
	+"<box-name>:  box to fetch value from, resulting query will be saved to inqsc-<box-name>.boc file" +cr
	generic-help
	
parse-options

$# 1 <> ' usage if
$1 =: box-name

."Generating an internal message to inquiry value of box " ^green box-name type ^reset ." as a STC. " ^reset cr

<b
	0x696e7175 32 u, // prox
	<b box-name $, 0 8 u, b> ref,
	0 32 u,
b> =: Message

Message 2 boc+>B "inqsc-" box-name $+ +".boc" dup =: filename B>file
cr ^green ."Inquiry query message body saved to " ^yellow filename type ^green ."!" cr ^reset
."You can embed this proxy query with your wallet script" cr
."  (for example -B in stock wallet) and send it to DSP SC!" cr cr
