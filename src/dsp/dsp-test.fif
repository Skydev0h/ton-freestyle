#!/usr/bin/fift -s

/*
	/------------------------------------------------------------------------\
	| Created for: Telegram (Open Network) Blockchain Contest #2 (Freestyle) |
	| Project #2: Data storage proxy smart contract (DSPSC)                  |
	>------------------------------------------------------------------------<
	| December 2019, second half (Happy New Year!)                           |
	\------------------------------------------------------------------------/
	
	THIS TEST SUITE REQUIRES SPECIAL PATCH THAT INTRODUCES runvmctxact AND 
	    runvmctxactq FUNCTIONS THAT ALSO RETURN THE C5 REGISTER OUTPUT!!!
*/

true =: runvmctxact_is_available
// false =: runvmctxact_is_available { } : gasrunvmctxact { } : gasrunvmctxactq

// If used on TON version without this function change to false
// THIS WILL DISABLE TEST CONDITIONS RELATED TO THE C5 REGISTER

true =: commit_fixed
// false =: commit_fixed

// If run_vm_code commit fix was not applied set this to false or tests fill fail (seqno)

"TonUtil.fif" include
"Asm.fif" include
"Color.fif" include
{ .s 255 halt } : ^ // inspect stack tool

// Load code
PROGRAM{ "dspsc.fif" include }END>c constant Code

newkeypair
	dup constant PublicKey 256 B>u@ constant UPublicKey
	dup constant PrivateKey 256 B>u@ constant UPrivateKey
	
// Build initial data
<b 
	0 6 u, // reserved
	0 1 u, // frt_change_p
	null dict, // box_tree
	0 32 u, // seq_no
	UPublicKey 256 u, // owner_key
	1000 24 u, // protected_frt
b> =: InitialData

// Initialize data variable
variable CurrentData
variable NewData
variable OutputActions
variable MessageValue
variable MessageCell
variable MessageBody
variable CurrentTime
variable ContractBalance
variable EntryPoint
variable RetCode
variable SenderWC
variable SenderAddr
variable DataChanged
variable TestNum
variable DetailedRun
variable CurrentKey
variable DataBackup
variable GasUsed
variable TotalGasUsed
runvmctxact_is_available =: rvca
1000000 =: GasLimit

InitialData CurrentData !
500 CurrentTime !
GR$10 ContractBalance !
0 EntryPoint !
<b b> MessageBody !
1 TestNum !
false DetailedRun !
PrivateKey CurrentKey !
0 TotalGasUsed !

{
	0 tuple 0x076ef1ea , // magic
	0 , 0 , // actions msg_sents
	CurrentTime @ , // unix_time
	1 , 1 , 0 , // block_lt, trans_lt, rand_seed
	0 tuple ContractBalance @ , dictnew , , // remaining balance
	0 , dictnew , // contract_address, global_config
	1 tuple // wrap to another tuple
} : c7

variable RetCode

{ ContractBalance @ + ContractBalance ! } : AddBalance
{ ContractBalance @ swap - ContractBalance ! } : SubBalance
{
	^cyan ."-> Run VM method " ^yellow EntryPoint @ dup . ^cyan ."with message" 0 =
	{ ^magenta ." carrying " ^green MessageValue @ .GR ^magenta ."from " ^yellow SenderWC @ SenderAddr @ .addr } if .":" ^reset cr
	MessageBody @ dup null? not { <s csr. } { drop cr } cond
	^green ."-> Current data (c4):" ^reset cr CurrentData @ <s csr.
	EntryPoint @ 0 = { MessageValue @ MessageCell @ } if MessageBody @ dup null? not { <s } { drop } cond
	EntryPoint @
	Code <s CurrentData @ 
	EntryPoint @ 0 = { MessageValue @ AddBalance } if c7 EntryPoint @ 0 = { MessageValue @ SubBalance } if
	GasLimit rvca { ^red DetailedRun @ { gasrunvmctxact } { gasrunvmctxactq } cond ^reset }
	{ ^red gasrunvmctx ^reset } cond dup GasUsed ! TotalGasUsed @ + TotalGasUsed !
	rvca { OutputActions ! } if   NewData !   RetCode !     false DetailedRun !
	CurrentData @ hash NewData @ hash <> dup DataChanged !
	dup { ^green ."-> Resulting data (c4):" ^reset cr NewData @ <s csr. } if
	rvca { OutputActions @ <s dup sbits swap srefs + 0 = { ^yellow ."-> Output actions (c5):" ^reset cr OutputActions @ <s csr. } ifnot } if
	RetCode @ dup 0 = { ^green } { ^red } cond ."Result code: " ^yellow . ^reset cr
	true = { ^yellow ."Data was changed!" } { ^blue ."Data was not changed" } cond ^reset cr
	NewData @ CurrentData !
}
: RunVM

{ true DetailedRun ! } : Detailed
{ false DetailedRun ! } : Silent
{ swap <b 0 4 u, b{100} s, 
  swap dup SenderWC ! 8 i, 
  swap dup SenderAddr ! 256 u, b> MessageCell ! } : SetAddress
{ CurrentTime @ + CurrentTime ! } : AddTime
{ CurrentTime ! } : SetTime
{ 0 EntryPoint ! } : SetInternal
{ -1 EntryPoint ! } : SetExternal
{ MessageBody ! MessageValue ! SetAddress } : SetMessage
{ SetMessage SetInternal } : SetIntMessage
{ MessageBody ! SetExternal } : SetExtMessage
{ MessageBody @ hashu CurrentKey @ ed25519_sign_uint
  <b swap B, MessageBody @ <s s, b> MessageBody ! } : Signed
{ MessageBody ! EntryPoint ! } : SetMethodId
{ CurrentData @ DataBackup ! } : SaveData
{ DataBackup @ CurrentData ! } : LoadData
{ CurrentData @ <s } : GetData
{ ^magenta ."[---> " ^cyan ."Test #" ^green TestNum @ . ^cyan .": " ^yellow type ^magenta ." <---]" 
  ^reset cr TestNum @ 1+ TestNum ! } : BeginTest
{ ^green ."[-> Test passed! <-]" ^reset cr cr } : EndTest
{ RetCode @ 0 = { cr ^red ."Test failed: Expected success retcode" ^reset cr cr 1 quit } ifnot } : ExpectSuccess
{ RetCode @ 0 = { cr ^red ."Test failed: Expected failure retcode" ^reset cr cr 1 quit } if } : ExpectFailure
{ dup RetCode @ = { cr ^red ."Test failed: Expected retcode " . ^reset cr cr 1 quit } ifnot drop } : ExpectCode
{ DataChanged @ false = { cr ^red ."Test failed: Expected data changed" ^reset cr cr 1 quit } if } : ExpectDataChange
{ DataChanged @ true = { cr ^red ."Test failed: Expected data not changed" ^reset cr cr 1 quit } if } : ExpectDataSame
0x0ec3c86d =: act_send_msg     0xad4de08e =: act_set_code     0x36e6b809 =: act_reserve     0x26fa1dd4 =: act_change_l
rvca {
{ OutputActions @ <s dup sbits swap srefs + 0 = { cr ^red ."Test failed: Expected no outputs" ^reset cr cr 1 quit } ifnot } : ExpectNoOutputs
{ 0 OutputActions @ <s { dup sbits over srefs + } { dup srefs 0 > { ref@ <s } if swap 1+ swap } while drop 2dup =
  { cr ^red ."Test failed: got " . ."output actions, expected " . ^reset cr cr 1 quit } ifnot 2drop } : ExpectOutputs
  {
	^cyan ."Current account balance: " ^yellow ContractBalance @ .GR ^cyan .", incoming message value: " ^yellow MessageValue @ 
		^yellow .GR ^cyan .", total: " ^yellow ContractBalance @ MessageValue @ + .GR ^reset cr
	null OutputActions @ <s
		{ dup sbits over srefs + }
		{ ref@+ <s } while drop
		{ dup null? not } 
		{ 32 u@+ swap
			dup act_send_msg = { drop 8 u@+ ref@ <s swap ^green ."[~] Send message ( mode 0x" ^yellow 2 0x. ^green .") to "
					             9 u@+ 8 i@+ 256 u@+ -rot ^yellow .addr ^green ."carrying " Gram@+ swap ^yellow .GR swap
								 64 and { ^green ."(bounce)" } { ^red ."(no bounce)" } cond ^reset cr 107 u@+ nip
								 dup sbits 0 > { ^cyan csr. ^reset null } if drop
								 0 } if
			dup act_set_code = { drop ."Set code message (not supported)" drop cr 0 0 } if
			dup act_reserve  = { drop 8 u@+ Gram@+ 1 u@ -rot ^red ."Currency reserve message ( " ^yellow .GR ^red .") with flags " ^yellow . ^reset cr drop 0 } if
			    act_change_l = { drop ."Change library message (not supported)" drop cr 0 } if
		} while drop
  } : OutputActionParse
}
{
  { } : ExpectNoOutputs     { drop } : ExpectOutputs       { } : OutputActionParse
} cond
0 0 SetAddress

/*
out_list_empty$_ = OutList 0;
out_list$_ {n:#} prev:^(OutList n) action:OutAction
  = OutList (n + 1);
act_send_msg#0ec3c86d mode:(## 8) 
  out_msg:^(MessageRelaxed Any) = OutAction;
act_set_code#ad4de08e new_code:^Cell = OutAction;
act_reserve_currency#36e6b809 mode:(## 8)
  currency:CurrencyCollection = OutAction;
libref_hash$0 lib_hash:bits256 = LibRef;
libref_ref$1 library:^Cell = LibRef;
act_change_library#26fa1dd4 mode:(## 7) { mode <= 2 }
  libref:LibRef = OutAction;
*/

variable seqno
0 seqno !

{ <b swap $, 0 8 u, b> ref, } : $ref,
{ seqno @ 32 u, seqno @ 1+ seqno ! } : seqno,
{ seqno, commit_fixed { seqno @ 1- seqno ! } ifnot } : seqno-,
{ 8 u, } : f,   { 8 i, } : w,    { 256 u, } : a,

{          0 32 u, } : Op:Init
{ 1651402103 32 u, } : Op:BoxNew    
{ 1650746732 32 u, } : Op:BoxDelete 
{ 1718778490 32 u, } : Op:Freeze    
{ 1952997751 32 u, } : Op:Thaw      
{ 1886547828 32 u, } : Op:Protect   
{ 1718773107 32 u, } : Op:ForceRes  
{ 1651729780 32 u, } : Op:BoxSet    
{ 1650681447 32 u, } : Op:BoxConfig 
{ 1667788663 32 u, } : Op:ChOwner   
{ 1667786354 32 u, } : Op:ChangeFRT 
{ 1970172018 32 u, } : Op:Unprotect 
{ 1768845685 32 u, } : Op:Inquiry   
{ 1886547832 32 u, } : Op:Proxy     
85143  =: G:seqno
103058 =: G:getbox
84154  =: G:getboxvalue

cr

"Initialization message"
BeginTest
	<b seqno, Op:Init b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Create a simple box"
BeginTest
	<b seqno, Op:BoxNew "test" $ref, 0x00 f, 0x00 f, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set value of a simple box"
BeginTest
	<b seqno, Op:BoxSet "test" $ref, "12345" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest	

"Set owner of a simple box"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x01 f, 0x00 f, -1 w, 12345 a, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Modify box value from owner"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, "98765" $ref, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Modify box value from another wallet"
BeginTest
	-1 54321 GR$10 <b Op:BoxSet "test" $ref, "badboy" $ref, b> SetIntMessage
	Silent RunVM
	32 ExpectCode ExpectDataSame
EndTest	

"Querying value with getter"
BeginTest
	G:getboxvalue <b "test" $, 0 8 u, b> SetMethodId
	Silent RunVM
	33 ExpectCode
EndTest

"Querying metadata with getter"
BeginTest
	G:getbox <b "test" $, 0 8 u, b> SetMethodId
	Silent RunVM
	ExpectSuccess .l cr
EndTest

"Changing configuration"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x40 f, 0x00 f, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Querying value with getter, again"
BeginTest
	G:getboxvalue <b "test" $, 0 8 u, b> SetMethodId
	Silent RunVM
	ExpectSuccess <s csr.
EndTest

"Inquiry box value"
BeginTest
	-1 54321 GR$10 <b Op:Inquiry "test" $ref, "10102020" $, b>  SetIntMessage
	Silent RunVM
	33 ExpectCode
EndTest

"Modify configuration (internal)"
BeginTest
	-1 12345 GR$10 <b Op:BoxConfig "test" $ref, 0x10 f, 0x00 f, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Inquiry box value, again"
BeginTest
	-1 54321 GR$10 <b Op:Inquiry "test" $ref, "10102020" $, b>  SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataSame 1 ExpectOutputs OutputActionParse
EndTest

"Proxy message with box value"
BeginTest
	-1 54321 GR$10 <b Op:Proxy "test" $ref, -1 w, 0x112233 a, 0 1 u, "prefix" $ref, "suffix" $ref, b>  SetIntMessage
	Silent RunVM
	33 ExpectCode
EndTest

"Modify configuration (internal)"
BeginTest
	-1 12345 GR$10 <b Op:BoxConfig "test" $ref, 0x20 f, 0x00 f, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Proxy message with box value, again"
BeginTest
	-1 54321 GR$10 <b Op:Proxy "test" $ref, -1 w, 0x112233 a, 0 1 u, "prefix" $ref, "suffix" $ref, b>  SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataSame 1 ExpectOutputs OutputActionParse
EndTest

"Proxy message with box value, inline"
BeginTest
	-1 54321 GR$10 <b Op:Proxy "test" $ref, -1 w, 0x112233 a, 1 1 u, "prefix" $ref, "suffix" $ref, b>  SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataSame 1 ExpectOutputs OutputActionParse
EndTest

"Remove flag ct owner"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x00 f, 0x40 f, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Freeze box"
BeginTest
	<b seqno, Op:Freeze "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set value of a frozen box"
BeginTest
	<b seqno-, Op:BoxSet "test" $ref, "12345" $ref, b> SetExtMessage Signed
	Silent RunVM
	39 ExpectCode
EndTest	

"Modify frozen box value from owner"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, "98765" $ref, b> SetIntMessage
	Silent RunVM
	39 ExpectCode
EndTest	

"Modify config of frozen box"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x00 f, 0x40 f, b> SetExtMessage Signed
	Silent RunVM
	39 ExpectCode
EndTest

"Thaw (unfreeze) box"
BeginTest
	<b seqno, Op:Thaw "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Modify config invalid flags"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x80 f, 0x00 f, b> SetExtMessage Signed
	Silent RunVM
	52 ExpectCode
EndTest

"Modify configuration (internal) invalid flag"
BeginTest
	-1 12345 GR$10 <b Op:BoxConfig "test" $ref, 0x01 f, 0x00 f, b> SetIntMessage
	Silent RunVM
	52 ExpectCode
EndTest	

"Protect the box"
BeginTest
	<b seqno, Op:Protect "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set value of a protected box"
BeginTest
	<b seqno-, Op:BoxSet "test" $ref, "12345" $ref, b> SetExtMessage Signed
	Silent RunVM
	38 ExpectCode
EndTest	

"Remove flag ct owner protected"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x00 f, 0x20 f, b> SetExtMessage Signed
	Silent RunVM
	52 ExpectCode
EndTest

"Add access flag ct owner protected"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x40 f, 0x00 f, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set owner of a protected box"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x01 f, 0x00 f, -1 w, 12345 a, b> SetExtMessage Signed
	Silent RunVM
	52 ExpectCode
EndTest

"Drop protection (internal)"
BeginTest
	-1 12345 GR$10 <b Op:Unprotect "test" $ref, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Set value of now unprotected box"
BeginTest
	<b seqno, Op:BoxSet "test" $ref, "11112222" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest	

"Protect the box again"
BeginTest
	<b seqno, Op:Protect "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Initiate force reset"
BeginTest
	<b seqno, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

750 AddTime

"Attempt force reset too early"
BeginTest
	<b seqno-, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	47 ExpectCode
EndTest

750 AddTime

"Attempt force reset in time"
BeginTest
	<b seqno, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set value of now force unprotected box"
BeginTest
	<b seqno, Op:BoxSet "test" $ref, "123123" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest	

"Protect the box again"
BeginTest
	<b seqno, Op:Protect "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Initiate force reset"
BeginTest
	<b seqno, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

750 AddTime

"Object the force reset"
BeginTest
	-1 12345 GR$10 <b Op:Protect "test" $ref, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Drop protection (internal)"
BeginTest
	-1 12345 GR$10 <b Op:Unprotect "test" $ref, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Set quota for box (2, 32)"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 2 Gram, 32 Gram, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Modify box value from owner: fits"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, "123" $ref, b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Modify box value from owner: fats"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, "1234" $ref, b> SetIntMessage
	Silent RunVM
	49 ExpectCode
EndTest	

"Modify box value from owner: many cells"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, 
		<b <b b> ref, "test" $, b> ref,
	b> SetIntMessage
	Silent RunVM
	ExpectSuccess ExpectDataChange 1 ExpectOutputs OutputActionParse
EndTest	

"Modify box value from owner: many cells FATs"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, 
		<b <b "a" $, b> ref, "test" $, b> ref,
	b> SetIntMessage
	Silent RunVM
	49 ExpectCode
EndTest	

"Modify box value from owner: too many cells"
BeginTest
	-1 12345 GR$10 <b Op:BoxSet "test" $ref, 
		<b <b <b b> ref, b> ref, "test" $, b> ref,
	b> SetIntMessage
	Silent RunVM
	48 ExpectCode
EndTest	

"Protect the box once again"
BeginTest
	<b seqno, Op:Protect "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Decrease quota for box (2, 31)"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 2 Gram, 31 Gram, b> SetExtMessage Signed
	Silent RunVM
	53 ExpectCode
EndTest

"Decrease quota for box (1, 32)"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 1 Gram, 32 Gram, b> SetExtMessage Signed
	Silent RunVM
	53 ExpectCode
EndTest

"Set quota for box (2, 32)"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 2 Gram, 32 Gram, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Increase quota for box (3, 48)"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 3 Gram, 48 Gram, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Unlim quota for box (0, 0)"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 0 Gram, 0 Gram, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set quota for box (2, 32)"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 2 Gram, 32 Gram, b> SetExtMessage Signed
	Silent RunVM
	53 ExpectCode
EndTest

"Disable quota"
BeginTest
	<b seqno, Op:BoxConfig "test" $ref, 0x00 f, 0x04 f, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Set quota for box (2, 32)"
BeginTest
	<b seqno-, Op:BoxConfig "test" $ref, 0x04 f, 0x00 f, 2 Gram, 32 Gram, b> SetExtMessage Signed
	Silent RunVM
	53 ExpectCode
EndTest

"Freeze protected box"
BeginTest
	<b seqno-, Op:Freeze "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	38 ExpectCode
EndTest

SaveData

"Change contract owner"
BeginTest
	<b seqno, Op:ChOwner 0 w, 1 a, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Try any action"
BeginTest
	<b seqno-, Op:Freeze "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	42 ExpectCode
EndTest

seqno @ 1- seqno !
commit_fixed { seqno @ 1- seqno ! } if
LoadData

"Initiate FRT change"
BeginTest
	<b seqno, Op:ChangeFRT 100 24 u, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

750 AddTime

"Commit FRT change early"
BeginTest
	<b seqno-, Op:ChangeFRT 100 24 u, b> SetExtMessage Signed
	Silent RunVM
	44 ExpectCode
EndTest

750 AddTime

"Commit FRT change early (min 1 day ...)"
BeginTest
	<b seqno-, Op:ChangeFRT 100 24 u, b> SetExtMessage Signed
	Silent RunVM
	44 ExpectCode
EndTest

86000 AddTime

"Commit FRT change after universe faded out"
BeginTest
	<b seqno, Op:ChangeFRT 100 24 u, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

"Initiate force reset"
BeginTest
	<b seqno, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest

75 AddTime

"Attempt force reset too early"
BeginTest
	<b seqno-, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	47 ExpectCode
EndTest

75 AddTime

"Attempt force reset in time"
BeginTest
	<b seqno, Op:ForceRes "test" $ref, b> SetExtMessage Signed
	Silent RunVM
	ExpectSuccess ExpectDataChange ExpectNoOutputs
EndTest


^yellow ."Code byte size: " ^cyan Code 0 boc+>B Blen dup . ^reset cr
^yellow ."Total used gas: " ^red TotalGasUsed @ dup . ^reset cr
^yellow ."Gas / code / #: " ^green 1000000000 * swap / TestNum @ / (.GR) type ^reset cr
cr
